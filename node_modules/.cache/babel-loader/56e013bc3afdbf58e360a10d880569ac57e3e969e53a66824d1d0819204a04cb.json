{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\demo-app\\\\src\\\\contexts\\\\SettingsContext.js\";\nimport PropTypes from \"prop-types\";\nimport { createContext } from \"react\";\n// utils\nimport getColorPresets, { colorPresets, defaultPreset } from \"../utils/getColorPresets\";\n// config\nimport { defaultSettings } from \"@/config/layouts\";\nimport notistackOptions from \"@/config/notistack\";\n\n// ----------------------------------------------------------------------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  ...defaultSettings,\n  notistackOptions,\n  setColor: defaultPreset\n};\nconst SettingsContext = /*#__PURE__*/createContext(initialState);\nSettingsProvider.propTypes = {\n  children: PropTypes.node,\n  defaultSettings: PropTypes.object\n};\nfunction SettingsProvider({\n  children,\n  defaultSettings\n}) {\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      ...defaultSettings,\n      notistackOptions,\n      setColor: getColorPresets(defaultSettings.themeColorPresets),\n      colorOption: colorPresets.map(color => ({\n        name: color.name,\n        value: color.main\n      }))\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_c = SettingsProvider;\nexport { SettingsProvider, SettingsContext };\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["PropTypes","createContext","getColorPresets","colorPresets","defaultPreset","defaultSettings","notistackOptions","jsxDEV","_jsxDEV","initialState","setColor","SettingsContext","SettingsProvider","propTypes","children","node","object","Provider","value","themeColorPresets","colorOption","map","color","name","main","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/project/demo-app/src/contexts/SettingsContext.js"],"sourcesContent":["import PropTypes from \"prop-types\";\r\nimport { createContext } from \"react\";\r\n// utils\r\nimport getColorPresets, {\r\n  colorPresets,\r\n  defaultPreset,\r\n} from \"../utils/getColorPresets\";\r\n// config\r\nimport { defaultSettings } from \"@/config/layouts\";\r\nimport  notistackOptions from \"@/config/notistack\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst initialState = {\r\n  ...defaultSettings,\r\n  notistackOptions,\r\n  setColor: defaultPreset,\r\n};\r\n\r\nconst SettingsContext = createContext(initialState);\r\n\r\nSettingsProvider.propTypes = {\r\n  children: PropTypes.node,\r\n  defaultSettings: PropTypes.object,\r\n};\r\n\r\nfunction SettingsProvider({ children, defaultSettings }) {\r\n  return (\r\n    <SettingsContext.Provider    \r\n      value={{\r\n        ...defaultSettings,\r\n        notistackOptions,\r\n        setColor: getColorPresets(defaultSettings.themeColorPresets),\r\n        colorOption: colorPresets.map((color) => ({\r\n          name: color.name,\r\n          value: color.main,\r\n        })),\r\n      }}\r\n    >\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n}\r\n\r\nexport { SettingsProvider, SettingsContext };\r\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,SAASC,aAAa,QAAQ,OAAO;AACrC;AACA,OAAOC,eAAe,IACpBC,YAAY,EACZC,aAAa,QACR,0BAA0B;AACjC;AACA,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAQC,gBAAgB,MAAM,oBAAoB;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,YAAY,GAAG;EACnB,GAAGJ,eAAe;EAClBC,gBAAgB;EAChBI,QAAQ,EAAEN;AACZ,CAAC;AAED,MAAMO,eAAe,gBAAGV,aAAa,CAACQ,YAAY,CAAC;AAEnDG,gBAAgB,CAACC,SAAS,GAAG;EAC3BC,QAAQ,EAAEd,SAAS,CAACe,IAAI;EACxBV,eAAe,EAAEL,SAAS,CAACgB;AAC7B,CAAC;AAED,SAASJ,gBAAgBA,CAAC;EAAEE,QAAQ;EAAET;AAAgB,CAAC,EAAE;EACvD,oBACEG,OAAA,CAACG,eAAe,CAACM,QAAQ;IACvBC,KAAK,EAAE;MACL,GAAGb,eAAe;MAClBC,gBAAgB;MAChBI,QAAQ,EAAER,eAAe,CAACG,eAAe,CAACc,iBAAiB,CAAC;MAC5DC,WAAW,EAAEjB,YAAY,CAACkB,GAAG,CAAEC,KAAK,KAAM;QACxCC,IAAI,EAAED,KAAK,CAACC,IAAI;QAChBL,KAAK,EAAEI,KAAK,CAACE;MACf,CAAC,CAAC;IACJ,CAAE;IAAAV,QAAA,EAEDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B;AAACC,EAAA,GAhBQjB,gBAAgB;AAkBzB,SAASA,gBAAgB,EAAED,eAAe;AAAG,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}